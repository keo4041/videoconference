// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: video_conference.proto

package videoconference

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConferenceClient is the client API for Conference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConferenceClient interface {
	JoinConference(ctx context.Context, opts ...grpc.CallOption) (Conference_JoinConferenceClient, error)
}

type conferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewConferenceClient(cc grpc.ClientConnInterface) ConferenceClient {
	return &conferenceClient{cc}
}

func (c *conferenceClient) JoinConference(ctx context.Context, opts ...grpc.CallOption) (Conference_JoinConferenceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Conference_ServiceDesc.Streams[0], "/videoconference.Conference/JoinConference", opts...)
	if err != nil {
		return nil, err
	}
	x := &conferenceJoinConferenceClient{stream}
	return x, nil
}

type Conference_JoinConferenceClient interface {
	Send(*MediaStream) error
	Recv() (*MediaStream, error)
	grpc.ClientStream
}

type conferenceJoinConferenceClient struct {
	grpc.ClientStream
}

func (x *conferenceJoinConferenceClient) Send(m *MediaStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *conferenceJoinConferenceClient) Recv() (*MediaStream, error) {
	m := new(MediaStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConferenceServer is the server API for Conference service.
// All implementations must embed UnimplementedConferenceServer
// for forward compatibility
type ConferenceServer interface {
	JoinConference(Conference_JoinConferenceServer) error
	mustEmbedUnimplementedConferenceServer()
}

// UnimplementedConferenceServer must be embedded to have forward compatible implementations.
type UnimplementedConferenceServer struct {
}

func (UnimplementedConferenceServer) JoinConference(Conference_JoinConferenceServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinConference not implemented")
}
func (UnimplementedConferenceServer) mustEmbedUnimplementedConferenceServer() {}

// UnsafeConferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConferenceServer will
// result in compilation errors.
type UnsafeConferenceServer interface {
	mustEmbedUnimplementedConferenceServer()
}

func RegisterConferenceServer(s grpc.ServiceRegistrar, srv ConferenceServer) {
	s.RegisterService(&Conference_ServiceDesc, srv)
}

func _Conference_JoinConference_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConferenceServer).JoinConference(&conferenceJoinConferenceServer{stream})
}

type Conference_JoinConferenceServer interface {
	Send(*MediaStream) error
	Recv() (*MediaStream, error)
	grpc.ServerStream
}

type conferenceJoinConferenceServer struct {
	grpc.ServerStream
}

func (x *conferenceJoinConferenceServer) Send(m *MediaStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *conferenceJoinConferenceServer) Recv() (*MediaStream, error) {
	m := new(MediaStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Conference_ServiceDesc is the grpc.ServiceDesc for Conference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoconference.Conference",
	HandlerType: (*ConferenceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinConference",
			Handler:       _Conference_JoinConference_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "video_conference.proto",
}
